{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"docs/","title":"Home","text":""},{"location":"docs/#welcome-to-pitt-sailbot","title":"Welcome to Pitt Sailbot!","text":"<p>Howdy! </p>"},{"location":"docs/#contributing","title":"Contributing","text":"<p>Check out the Getting Started for steps on how to set up your environment to contribute.</p>"},{"location":"docs/#resources","title":"Resources","text":"<p>Commonly used resources and commands can be found under the Resources tab.</p>"},{"location":"docs/Code%20Overview/","title":"Code Overview","text":"<p>This is a run-down of what our code does. The project repo may look daunting, but half of it is just configurations and boilerplate. I promise its not as complicated as it looks!</p>"},{"location":"docs/Code%20Overview/#ros2","title":"ROS2","text":"<p>The core of our boat runs on ROS2. This is standard for almost all robotics applications in industry.</p>"},{"location":"docs/Code%20Overview/#why-ros","title":"Why ROS?","text":"<p>ROS provides many benefits: - It handles the parallelization of code, which means you can utilize your entire CPU. - It makes code independent. This lets you test individual nodes and scale easier. - It standardizes how code communicates. This lets you swap out a sensor or rewrite code without causing bugs in other parts of the code. - It provides a lot of supporting libraries</p>"},{"location":"docs/Code%20Overview/#what-is-ros","title":"What is ROS?","text":"<p>The foundation of ROS relies on a network of independent Nodes. These often represent a physical sensor or motor, but they also apply to anything you would write a <code>Class</code> or <code>Object</code> for.</p> <p>To communicate between Nodes, ROS uses topics, which are like a group chat that Nodes can talk on  or listen to. To speak on a topic, you create a publisher. Then, you can write whatever messages you want to a topic. To listen to a topic, you create a subscriber. Any messages that are published onto a topic are broadcasted to ALL subscribers on that topic. </p> <p>Whenever a message is broadcasted, the subscribers will run a callback function. A callback function is just  a function that is executed whenever a specific event happens. For example, pressing the 'A' key on a keyboard might run  <code>a_pressed_callback()</code>, which would execute whatever code is defined in the function. ROS also uses  callbacks for when  a certain time has passed, called timers.</p>"},{"location":"docs/Code%20Overview/#sensorscontrols","title":"Sensors/Controls","text":"<p>Scripts which interface with the mechanical parts of the boat. Virtual versions of each sensor exist for debugging with fake values.</p> <ul> <li>GPS - boat position</li> <li>compass - boat heading</li> <li>windvane - wind direction</li> <li>camera - RGB optical camera</li> <li>cameraServos - pitch and yaw servos controlling camera movement</li> <li>boatMovement - rudder/sail controls and controlling the boat's movement</li> <li>Odrive - motors used in rudder and sail control</li> <li>transceiver - wireless communication to shore</li> </ul>"},{"location":"docs/Code%20Overview/#utils","title":"Utils","text":"<p>Miscellaneous functions used by the boat</p> <ul> <li>constants - config containing all static parameters used by the boat</li> <li>utils - commonly used functions for anything</li> <li>boatMath - common functions for working with coordinates and angles</li> <li>eventUtils - common functions used in events</li> <li>objectDetection - AI buoy detection from an image</li> </ul>"},{"location":"docs/Code%20Overview/#debug","title":"Debug","text":"<p>Scripts used to test boat behavior - boatSim - simulates how the boat moves in a virtual environment</p>"},{"location":"docs/Getting%20Started/","title":"Getting Started","text":"<p>This guide walks you through all the steps to get started with contributing to Sailbot! :D</p> <p>For our tech stack, we use:</p> <ul> <li>Python - Higher level autonomy code; everything running on the Pi.</li> <li>C++ - Low level sensor reading code; everything running on the Teensy microcontroller.</li> <li>Git - Source control for collaborating</li> <li>Pycharm/VS Code - Preferred code editors. Use whatever you like.</li> <li>Docker - Isolated environment for testing and running our code. This is so we don't have to worry about \"it works on my computer\".</li> </ul>"},{"location":"docs/Getting%20Started/#table-of-contents","title":"Table of contents","text":"<ol> <li>Install Dependencies<ul> <li>Git</li> <li>Python</li> <li>Docker</li> <li>VSCode</li> </ul> </li> <li>Testing our Environment</li> </ol>"},{"location":"docs/Getting%20Started/#installing-git-using-github","title":"Installing Git &amp; Using Github","text":"<p>Git is the industry standard for collaborating on projects. It allows multiple people to work on different features and easily share changes. If you're majoring in CS you'll be forced to learn this eventually, and its a great time to get a head start for your classes.</p> <p>1. Install Git</p> <p>Don't know git? Learn here. Need a refresher instead? Here's a cheat sheet.</p> <p>2. Navigate over to Github. If you don't have an account, create one! Using Github early on is great for saving your progress on projects.</p>"},{"location":"docs/Getting%20Started/#installing-python","title":"Installing Python","text":"<p>Pretty much everything we write is using Python. Its easy to pick up and it has good supporting libraries for working with the Raspberry Pi.</p> <p>3. Install Python 3.10</p> <ul> <li>Downloads are at the bottom of the page. You'll want to download either Windows 64-bit or macOS.</li> </ul> <p>Never used Python before? It's ok! If you're taking CS 0010/CMPINF 0010 you'll get to learn in your classes. If not, here's some resources to learn some of the basics if you're willing to put in the time.</p> <p>Or, if you just need a refresher or want to see some cool advanced features click here.</p>"},{"location":"docs/Getting%20Started/#installing-docker","title":"Installing Docker","text":"<p>Docker is used for setting up containers for our code. It's essentially a recipe to build the OS, and all other dependencies necessary to run your code so we can avoid the issue of \"well it works on my machine...\". Technically, we could skip all of these installation steps if I were to make container for developing, but it balloons compilation times from 5s to over 4 minutes.</p> <p>We'll be using Docker for testing and running our robot code. Using docker containers is incredibly useful since it is easy to set up and its hardware agnostic. On the lake, water and electronics don't mix well, and if we have to unexpectedly switch to another Pi, we can get the code running in just 15 minutes.</p> <p>4. Install Docker</p>"},{"location":"docs/Getting%20Started/#installing-ide-setting-up-our-environment","title":"Installing IDE &amp; Setting up our Environment","text":"<p>VS Code is an incredibly strong and lightweight editor that works for almost all programming languages. If you prefer Jetbrains's PyCharm, that's also ok. I still recommend you install VS Code since it will be used in most classes and it has helpful extensions to streamline development.</p> <p>5. Download and install VSCode</p> <p>6. In the welcome page, under Start, click 'Clone Git Repository' and enter our repository link <code>https://github.com/PittSailbot/Sailbot.git</code></p> <p>7. Press Ctrl + Shift + P to pull up VS Code's search and enter \"Extensions: Install Extensions\".</p> <p>8. Search for and install the 'Dev Container' extension</p> <p>9. Press Ctrl + Shift + P and enter \"Dev Containers: Rebuild and Reopen in Container\"</p> <ul> <li>This step will take a while to install the rest of our dependencies, but it gives us a reliable environment to develop in</li> </ul>"},{"location":"docs/Getting%20Started/#testing-our-environment","title":"Testing our Environment","text":"<p>We're almost there! Now that we have a docker container running, we can compile and run our code in a Linux environment. Docker already builds the correct versions of Ubuntu, ROS2 and all other dependencies so there is very little setup!</p> <p>10. In the new VSCode dev container terminal, enter:</p> <pre><code>. compileDocker.sh\n</code></pre> <ul> <li>Every time you change the source, code you'll run this bash file to compile the changes.</li> </ul> <p>11. Lastly, we can run any of the ROS2 nodes like so:</p> <pre><code>ros2 run sailbot transceiver\n</code></pre> <ul> <li>This should fail with the following exception <code>Exception: No connected devices found</code>. That's ok, because our computer doesn't have an RC transceiver!</li> </ul> <p>Many features in the code will not work since our virtual environment is lacking real sensors and peripherals that the boat has. However, the Docker is very useful for ensuring that your code compiles with ROS2. This lets us to debug compiler errors without having to set the boat up first. Individual nodes can be ran with <code>ros2 run sailbot [node]</code>. You can view all of our robot's nodes with <code>ros2 node list</code></p>"},{"location":"docs/Github%20Cheat%20Sheet/","title":"Enable/disable pre-commit hooks","text":"<p>Pre-commit hooks help keep the codebase consistent by auto-formatting with black and isort whenever you commit.  The goal is to reduce git diffs so that comparing histories is much easier, but pre-commit hooks can get in the way when merging/rebasing. I recommend only disabling when you really need to, to prevent 'catch-up' styling commits.</p> <ul> <li>Enable with <code>pre-commmit install</code></li> <li>Disable with <code>pre-commit uninstall</code></li> </ul>"},{"location":"docs/Github%20Cheat%20Sheet/#splitting-up-a-commit-in-a-branch","title":"Splitting up a commit in a branch","text":"<p>Use case: You combined unrelated changes into the same commit and want to split them for readability or reducing diffs</p> <ol> <li>Checkout the branch that you want to modify (e.g. pj/feature)</li> <li>Start an interactive rebase which includes your commit. - At a minimum, git rebase -i commit^ will start the rebase at the commit you want to split - You can also rebase the whole branch, which I usually do to split all target commits in one go</li> <li>Mark the commit(s) that you want to split with edit</li> <li>When git presents the commit that you want to split:<ol> <li>Reset state to the previous commit using git reset HEAD^</li> <li>Use git add to carefully and incrementally add changes to the index</li> <li>Run git commit when you have a set of atomic changes that you are ready to commit</li> <li>Repeat the git add and git commit process until you have processed each set of changes represented by the commit</li> </ol> </li> <li>Run git rebase --continue to resume or finish the rebase</li> </ol>"},{"location":"docs/Github%20Workshop/","title":"Github","text":""},{"location":"docs/Github%20Workshop/#topics","title":"Topics","text":"<ul> <li>version control, conceptually</li> <li>branching</li> <li>committing &amp; pushing to GitHub</li> <li>undoing changes</li> </ul>"},{"location":"docs/Github%20Workshop/#version-control-with-git-and-github","title":"Version Control with <code>git</code> and GitHub","text":"<p>As code became, more and more, a large commercial endeavour with many contributors across different teams, cities, and timezones, the process of tracking versions of software became non-trivial.</p>"},{"location":"docs/Github%20Workshop/#enter-the-vcs","title":"Enter the VCS","text":"<p>A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As the project evolves, teams can run tests, fix bugs, and contribute new code with the confidence that any version can be recovered at any time. Developers can review project history to find out:</p> <ul> <li>Which changes were made?</li> <li>Who made the changes?</li> <li>When were the changes made?</li> <li>Why were changes needed?</li> </ul>"},{"location":"docs/Github%20Workshop/#diversion-what-actually-is-a-repository","title":"Diversion: what actually is a repository?","text":"<p>A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets \u2013 anything your project needs. GitHub makes it easy to add a README and other files, such as licenses and codes of conduct. </p> <p>So, you know how you can use <code>ls</code> with the <code>-a</code> flag to print all the files, even the hidden ones? Let's do that here; it'll reveal something cool. If you do <code>ls -a</code>, you'll see two files you didn't know were there: <code>.git</code> and <code>.gitignore</code>.</p> <p><code>.gitignore</code> is a file where you can specify files for <code>git</code> to, well, ignore. Things like sensitive passwords or databases, you don't want to put up on GitHub for everyone to see, so this lets you quickly tell <code>git</code> to not save anything you don't want it to.</p> <p><code>.git</code> is much deeper, though: it's where the repository actually lives. <code>.git</code> is actually a directory which contains information about the repository and a list of every change you've ever made in the repository. Every time you tell <code>git</code> to save your work, it'll track everything you've altered, removed, or added to the repository in that <code>.git</code> folder. That way, if you ever want to revert back to a previous change, you can do so. And, additionally, anyone who can see your repository can look at how your code has changed and developed over time.</p>"},{"location":"docs/Github%20Workshop/#git-workshop","title":"Git Workshop","text":"<p>If git isn't already installed, install it here! Make sure you have a Github account too!</p> <p>We should have the Sailbot repo already set up. If not, follow the steps in Getting Started. Open the project in Pycharm.</p>"},{"location":"docs/Github%20Workshop/#making-our-branch","title":"Making our branch","text":"<p>Branches in <code>git</code> are versions of your project that you separate from the original branch, which is called <code>main</code>. Ours is called <code>main</code> because we made the repository on GitHub. But, if you make a repo through <code>git</code> itself, the original branch will be called <code>master</code>. You might hear someone refer to an original branch as <code>master</code>, so just remember that they both sorta refer to the same thing.</p> <p>We're going to be making our own branch to work on changes. Within Pycharm, click on the Sailbot&gt;main tab at the top right (its got a lil tree next to it). Click new branch and name it after yourself or preferably the issue you're working on (if applicable). </p> <p>Alternatively, in the terminal, you can create a new branch with the command <code>git checkout</code>, using the <code>-b</code> flag, which (you guessed it) stands for \"branch\".</p> <p>Note: if git asked you to login with your GitHub username and a token, check out this guide on making a token. If you do need to do so, the only box you need to check is <code>repo</code>; you can ignore the rest.</p> <p>Lets confirm that our branch was created. Go to the Sailbot repo and check to make sure that your branch was created. If so, great! If not, let me know.</p>"},{"location":"docs/Github%20Workshop/#lets-mess-around","title":"Lets mess around","text":"<p>Take a look around our repository. Pretty nifty right? Lots of the files in /Sailbot are config files and boilerplate for ROS and automated testing. We won't have to worry about any of that right now.</p> <p>For now, lets cause some chaos. Add any files you want or make random changes. We'll be undoing all of these later so don't worry!</p>"},{"location":"docs/Github%20Workshop/#commiting-your-work","title":"Commiting your work","text":"<p>You tell <code>git</code> to save your work by using the command <code>git commit</code>. Committing is like hitting \"Save\" on a Word document, but it's a little more intentional than that; because you have to specifically tell <code>git</code> why you're saving, a commit is a human-meaningful amount of work. </p> <p>At the top left of Pycharm look for a lil -o- symbol. This tracks all of our local changes. Pycharm has a cool feature to group specific changes into Changelists. This is especially helpful when working on multiple parts of the codebase at once. Instead of publishing all of our changes, we can cherry pick which changes we want to push and have relevant commit messages for each.</p> <p>Alternatively, in the terminal run <code>git add .</code> to add any untracked files and <code>git commit -m \"my first commit\"</code>. The <code>-m</code> flag stands for message, and that's how you tell <code>git</code> and, by extension, anyone who looks at your repository, what you did for this commit. </p>"},{"location":"docs/Github%20Workshop/#publishing-our-work","title":"Publishing our work","text":"<p>Now that we've made all the changes we need, lets push them to our branch. Make sure you're in your own branch for this (but it won't nuke anything if you aren't). </p> <p>In Pycharm's commit tab, checkmark all of the files you'd like to commit. At the bottom write in your commit message. In real commits, try to summarize all of the changes you'd made with a bulleted list.</p> <p>After writing your commit message, hit commit and publish. </p> <p>Alternatively, in the terminal run <code>git push</code></p>"},{"location":"docs/Github%20Workshop/#oh-shit-wheres-the-undo","title":"Oh shit! Where's the undo?","text":"<p>No one is immune to the \"oh shit\" moments that happen when pushing code. Sometimes we catch a bug the second it goes live, sometimes we accidentally nuke the repo. It happens. But unlike numbering and saving versions of your code locally. 99% of the time we can recover. That's what git is for.</p> <p>In Pycharm, hit the little tree in the bottom left corner. This will show our entire version history. Right now, you should see the commit you just pushed at the top of the list.</p> <p>There are many ways we can revert this progress. In Pycharm, there are three main ways we can 'undo' this commit.  - <code>undo</code> (only works on non pushed commits) will unstage the files and return the changes to your local copy. - <code>revert</code> will make create another commit, undoing the changes you've made.  - <code>drop</code> will delete the commit from the git history like it was never pushed in the first place.</p> <p>For now lets drop the commit. Our branch should be identical to main now.</p>"},{"location":"docs/How%20to%20Edit%20This%20Site/","title":"How to Edit This Site","text":"<p>Documentation for our site is written using markdown and published through Github pages using mkdocs. If you're unfamiliar with using markdown, check out this handy cheat sheet.</p> <p>In depth documentation for mkdocs can be found here. </p>"},{"location":"docs/How%20to%20Edit%20This%20Site/#install-dependencies","title":"Install dependencies","text":"<ol> <li>In the terminal, install mkdocs and the mkdocs material theme with:</li> </ol> <pre><code>pip install mkdocs\n</code></pre> <pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"docs/How%20to%20Edit%20This%20Site/#making-changes","title":"Making changes","text":"<p>Our documentation is written in markdown and is organized into pages by <code>mkdocs.yml</code>. The main site is a combination of html and css.</p> <ul> <li> <p>For editing any pre-existing .md files, changes will be updated automatically</p> </li> <li> <p>If you are adding any new files, then add the file under the <code>mkdocs.yml</code>'s nav config like so:</p> </li> </ul> <pre><code>nav:\n   - Getting Started: \"Getting Started.md\"\n</code></pre> <p>This will make the file \"Getting Started.md\" visible on the web page's index</p>"},{"location":"docs/How%20to%20Edit%20This%20Site/#previewing-changes","title":"Previewing changes","text":"<p>To preview the documentation site before pushing changes to github:</p> <ol> <li>In the terminal, run:</li> </ol> <pre><code>mkdocs serve\n</code></pre> <ol> <li>In any web browser navigate to 127.0.0.1:8000</li> </ol>"},{"location":"docs/Pi%20Cheat%20Sheet/","title":"Pi Cheat Sheet","text":"<p>GPIO Pins - https://pinout.xyz/pinout/pin5_gpio3/</p>"},{"location":"docs/ROS2/","title":"ROS2","text":""},{"location":"docs/ROS2/#official-documentation","title":"Official Documentation","text":"<p>https://docs.ros2.org/latest/api/rclpy/api.html https://docs.ros.org/en/humble/</p>"},{"location":"docs/ROS2/#helpful-examples","title":"Helpful examples","text":"<p>Blog: https://roboticsbackend.com/category/ros2/</p> <p>Video: https://www.youtube.com/@RoboticsBackEnd/playlists</p>"},{"location":"docs/ROS2/#interactive-course","title":"Interactive Course","text":"<p>https://app.theconstructsim.com/</p>"},{"location":"docs/ROS2/#common-shell-commands","title":"Common Shell Commands","text":"<p>Publish to a topic <code>ros2 topic pub --once boat/cmd_rudder std_msgs/Float32 \"{data: 30.0}\"</code></p> <p>Run with file args <code>ros2 run sailbot dummyevent --ros-args --params-file ./config/params_eventDefaults.yaml</code></p> <p>Run with commandline args <code>ros2 launch sailbot event_launch.launch.py executable:=dummyEvent</code></p>"},{"location":"docs/Shell%20Commands/","title":"Shell Commands","text":"Command Description Example ssh (ip) Used to remotely connect to a device with a known ip ssh pi@192.168.1.1 cd (path) Changes the current directory cd /home/pi/Downloads cd ../ Moves to the parent folder cd - Return to the last cd (helpful for switching between two paths) ls Lists all files in the current directory nano Text editor for various files nano main.py clear Clears all text from the shell rm Removes a file rm delete_me.txt rm -r Removes a folder with everything inside of it rm home/pi/delete_me sudo -s Elevates the terminal with administrator privilege scp (file) (directory) Copies files to another path or remote directory nohup (command) (args) Continues the command/executable even if ssh connection is lost Shortcuts Description tab Autocompletes a path or filename tab (x2) Shows all available autocompletions for a command Ctrl + C Interrupt a currently running program up/down arrow Traverse through previously entered commands"},{"location":"docs/Shortcuts/","title":"VS Code","text":"<p>Most useful shortcuts | Shortcut | Use | | - | - | | Ctrl + Shift + P | Search all IDE functions/commands | | Ctrl + Shift + F | Find in all files | | Ctrl + ` | Open terminal | | Shift + Alt + Up/Down | Duplicate line above/below | | Ctrl + / | Comment out line | | Ctrl + h | Find &amp; Replace |</p>"},{"location":"docs/Starting%20the%20Boat/","title":"Starting the Boat","text":"<p>Step-by-step process for how to set up all the electronics and software to run the boat.</p>"},{"location":"docs/Starting%20the%20Boat/#connecting-the-peripherals","title":"Connecting the Peripherals","text":"<p>Before plugging in the batteries ensure the following are plugged in:</p> <p>IMPORTANT: Do not hot plug anything on the PCB, if you want to plug something in you MUST cut power</p> <ol> <li>Connect the two <code>Motor Encoder Wires</code> (labeled M1 and M0) to the corresponding pin headers on the Odrive. The black wire should line up with the GND pin. The 3.3V pin for each encoder is unused. </li> <li>Connect the two sets of 3-wire <code>Sail &amp; Rudder Motor Wires</code> from each corresponding motor to the <code>Sail Motor</code> and <code>Rudder Motor</code> female bullet connectors on the PCB.</li> </ol> <p></p> <ol> <li>Plug the USB-C cable from the mast. This plug should have a silver <code>T</code> facing up (the top side of the PCB is where the Odrive is).</li> <li>Plug the other end of the USB-C cable into the crows nest at the top of the mast. the USB-C cable also has a <code>T</code> marked on it here, this time the <code>T</code> should face the 3D print, you should be able to see the black side of the USB-C but not the side with the silver <code>T</code>.</li> <li>Plug in the Wi-Fi router to the USB port on the PCB directly next to the USB-C port where the mast is plugged in. Do not plug it into the USB port on either of the Pis, and do not plug it into the USB port the Pi is plugged into.</li> <li>Connect the Pi and Teensy with a USB - USB-C cable.</li> <li>Connect the Odrive and Pi with a USB - USB cable.</li> </ol>"},{"location":"docs/Starting%20the%20Boat/#powering-the-boat","title":"Powering the Boat","text":"<ol> <li>Make sure the power switch is in the <code>Off</code> position, try and move both switches together, they are taped together to make this easier. </li> <li>Plug the batteries into the BMS, match the etape colors.</li> <li>If there is nothing else to plug in you can plug the BMS output into the PCB (the lil \"| -\" plug), if you later realize there is something else you forgot to plug in you must unplug the batteries.</li> <li>Flip the PCB switch and Odrive switch. This wll power the rest of the board, including the raspberry pi.<ul> <li>You should see the 3 Blue LEDs in the top right of the PCB, as well as the green and red LEDs on the Rasp Pi come on. If not look at this guide.</li> </ul> </li> <li>Power on the Wi-Fi router</li> </ol>"},{"location":"docs/Starting%20the%20Boat/#starting-the-boat","title":"Starting the Boat","text":"<ol> <li>Connect you laptop to the <code>Pitt Sailbot</code> Wi-Fi access point. <ul> <li>Password is <code>sailbot</code>, admin is <code>sailboot</code></li> <li>(Optional) Make sure everything is working up to this point by following the first 3 steps in Wifi Connectivity</li> </ul> </li> <li>On your laptop open a terminal.</li> <li>SSH into the Pi using the powershell window. The command looks like this: <code>ssh &lt;user&gt;@&lt;Ip address&gt;</code><ul> <li>The following are subject to change:</li> <li>Pi5: <code>ssh pi@192.168.8.11</code></li> <li>Pi5: <code>ssh sailbot@192.168.8.12</code></li> <li>The passwords for both are <code>sailbot</code></li> <li>If the Pi isn't connected a phone hotspot or our router then you'll need to connect a monitor and keyboard to the pi.</li> </ul> </li> <li>Configure the Odrive (on the Pi connected to the Odrive). Make sure the motors are both able to spin a few complete rotations in each direction. With either option you should see a print out of the results with any errors generated. If there are any errors look here<ul> <li>Option 1: <code>odriveCalibration.py</code>. Using <code>0</code> or <code>1</code> as an argument will only calibrate the corresponding motor.</li> </ul> </li> </ol> <pre><code>cd ~/Sailbot\npython3 ./utils/odriveCalibration.py\n</code></pre> <ul> <li>Option 2: <code>odrivetool</code></li> </ul> <pre><code>odrivetool\n # run the following commands in the odrivetool cli \nodrv0.clear_errors()\nodrv0.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE\nodrv0.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE\ndump_errors(odrv0)\n # type quit() to leave the cli\n</code></pre> <ol> <li>Start the boat core using the following commands. This will launch the minimum necessary ROS nodes to run RC.<ul> <li>Whenever the code is changed, make sure to run <code>. compile.sh</code> again</li> <li>Available ROS2 nodes can be found in <code>setup.py:entry_points</code> and launch files can be found in <code>/launch</code></li> </ul> </li> </ol> <pre><code>cd ~/Sailbot\npython3 ./Utils/docker.py run\n# you should now be in a docker terminal and see /workspace# to the left of your cursor, if not look for error messages\n# you can type \"exit\" to leave the docker terminal and return to your normal terminal if you need to. \n# The following commands should be in the docker terminal\n. compileDocker.sh\nros2 launch sailbot boat_all.launch.py\n</code></pre> <ol> <li>Turn on the RC controller. You should now be able to control the rudder and sail using the controller.<ul> <li>Adjust the offsets of the sail/rudder by flipping the sail/rudder offset switch. Then, adjust the potentiometer to adjust the zero point.</li> </ul> </li> </ol>"},{"location":"docs/Starting%20the%20Boat/#connecting-to-the-site","title":"Connecting to the Site","text":"<ol> <li>Connect to Pi5 (<code>192.168.8.11</code> or <code>192.168.8.12</code>)</li> </ol> <pre><code>cd Sailbot\npython3 ./Utils/docker.py run\n. compileDocker.sh\nros2 run sailbot website\n</code></pre> <ol> <li>Connect to https://192.168.8.11:5001</li> </ol>"},{"location":"docs/Starting%20the%20Boat/#rewiring-devices","title":"Rewiring Devices","text":"<p>Not necessary for startup. Only if swapping components.</p>"},{"location":"docs/Starting%20the%20Boat/#compass","title":"Compass","text":"<ol> <li>Look for this and connect the SCL, SDA, GND, and 3V3 pins to the pi.<ul> <li>To confirm its connected, run <code>i2cdetect -y 1</code> and look for a device on 0x1e</li> </ul> </li> </ol>"},{"location":"docs/Starting%20the%20Boat/#windvane","title":"Windvane","text":"<ol> <li>Thread the 6-pin header cable through the mast</li> <li>At the top of the mast, connect the 6-pin header to the windvane</li> <li>Connect the header to the rotary encoder on the PCB, matching the direction</li> </ol>"},{"location":"docs/Starting%20the%20Boat/#charging-batteries","title":"Charging Batteries","text":"<ol> <li>Turn on the variable power supply and set to 12.6 volts</li> <li>Turn off the power supply, then connect alligator clips between the power supply and the batteries (check polarity)</li> <li>Charge until current starts to drop</li> </ol>"},{"location":"docs/Troubleshooting/","title":"Troubleshooting","text":"<p>This guide helps solve problems related to the boat</p>"},{"location":"docs/Troubleshooting/#pcb-main-power","title":"PCB Main Power","text":"<p>The batteries are plugged in but nothing is lighting up 1. Check the voltage of the plug you are connecting to PCB. It should be &gt;10.8V. If it is not then the batteries are dead or nearly dead and the BMS might be preventing them from being used to prevent damage, you will need to charge the batteries or use different ones. </p> <ol> <li>Some of the deans plugs do not fit correctly together, For example the batteries will not make proper contact with the PCB when plugged in directly. Try using jumper wires to connect the battery to the PCB. BE VERY CAREFUL! Switching the Ground and V+ wire could destroy part or all of the PCB. Accidentally touching the battery alligator clips while connecting them to the PCB Could destroy the battery. </li> </ol>"},{"location":"docs/Troubleshooting/#wi-fi-connectivity","title":"Wi-Fi Connectivity","text":"<ol> <li>Make sure the Wi-Fi router is running and has a green light for the Wi-Fi signal</li> <li>Make sure your device is connected to the <code>Pitt Sailbot</code> Wi-Fi network</li> <li>Open a browser and type <code>192.168.8.1</code> into the address bar. The password is <code>sailboot</code>. On the left there should be a tab labeled clients, after clicking on it you should see the clients currently connected. If you've gotten to this point you laptop will definitly be one of the listed devices, you should also see the Pi(s) and their Ip addresses. </li> <li>If you do not see the Pi(s) connected unplug the Pi power cable from the PCB (do not turn off the entire PCB, this is the only time you should do this). Do not unplug the GPIO cable (The GPIO cable is the wide black cable)</li> <li>Wait a moment and plug the Pi back in, make sure it has a green light blinking (or steady). If only the red light shows up the is a problem with the Pi. If not light comes up it might not be getting power</li> <li>If you see the green light on the Pi then give it a little while and try again to connect. <ul> <li>Sometimes it takes a minute or two for the Pi to show up (or disappear from) clients at <code>192.168.8.1</code></li> </ul> </li> </ol>"},{"location":"docs/Troubleshooting/#odrive-setup","title":"Odrive Setup","text":"<ul> <li>These are the only two common errors, if anything else comes up while running the calibration try asking chatGPT for help. </li> </ul>"},{"location":"docs/Troubleshooting/#unbalanced-phases","title":"Unbalanced Phases","text":"<p>This seems to happen with axis1 sometimes, just swap the 3 motor wires (on the actual motor) around so they connect to a different female connector. You may have to try several different options before it works, run the calibration sequence with each try. It is ok to unplug and replug these wires (hotswap) if and only if the motors calibration sequence failed for the axis you are unplugging AND you have not reset the axis using odrv0.clear_errors() </p>"},{"location":"docs/Troubleshooting/#encoder-cpr-mismatch","title":"Encoder CPR mismatch","text":"<p>This happens somewhat randomly, make sure the wires are plugged all the way in and the encoders are firmly connected to the motor. Spin the motor a little and make sure there is not too much resistance (if there is spray some wd40 or something) Even still this happens on occasion, just run the calibration again. </p>"},{"location":"docs/Troubleshooting/#docker","title":"Docker","text":"<ul> <li>ROS2 colcon build fails</li> <li>docker.py create copies over venv files as well? Causes unrelated packages to be included</li> </ul>"},{"location":"docs/Troubleshooting/#no-rc-control","title":"No RC Control","text":"<p>The process for receiving and executing RC is as follows:</p> <ul> <li>RC controller talks to receiver in the mast</li> <li>Mast receiver is read by teensy over serial (connected by usb-c) in <code>transceiver.cpp</code></li> <li>Teensy publishes controller state to Pi in <code>main.cpp</code></li> <li>Pi publishes controller state to various topics in <code>transceiver.py</code>, notably <code>cmd_rudder</code> and <code>cmd_sail</code></li> <li><code>Motordrivers.py</code> subscribes to these topics and sets the correct position with <code>odrive.py</code></li> </ul>"},{"location":"docs/Troubleshooting/#check-receiver-led","title":"Check receiver LED","text":"<p>The LED should be permanent blue. If it is blue and flashing red, then the controller is either not on or bound incorrectly.</p> <p>If there is no LED light, then check that the usb-c is plugged into both ends of the mast.</p>"},{"location":"docs/Troubleshooting/#force-publish-to-cmd_ruddercmd_sail","title":"Force publish to <code>cmd_rudder</code>/<code>cmd_sail</code>","text":"<p>Paste <code>ros2 topic pub --once boat/cmd_rudder std_msgs/Float32 \"{data: 30.0}\"</code> in the terminal to see if motorDrivers is reading the topic correctly.</p> <p>If nothing happens then make sure that the odrive is calibrated using odrivetool following the steps in <code>Starting the Boat.md</code></p>"},{"location":"docs/Troubleshooting/#check-that-the-teensy-is-publishing-publishing-and-being-read-into-transceiverpy-correctly","title":"Check that the teensy is publishing publishing and being read into transceiver.py correctly","text":""},{"location":"docs/Troubleshooting/#swap-out-the-cable","title":"Swap out the cable","text":"<p>The mast only works with usb-c gen 3.2.</p>"},{"location":"docs/Troubleshooting/#boat-loses-rc-on-water","title":"Boat loses RC on water","text":"<p>Seems to happen when the boat either leaves Wi-Fi range or the laptop goes to sleep while the terminal is open and the code is running. Solved by manually killing the terminal after running the boat code.</p>"}]}